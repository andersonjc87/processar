#!groovy

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

pipeline {
    agent any
    tools {
        maven 'M2'
        //jdk 'Jdk1.7u80'
        jdk 'Jdk1.8u191'
    }
    environment {

        // For teste purpose only (need to be set always to TRUE! )
        RUN_PRE_BUILD = true
        RUN_POST_BUILD = true
        RUN_COMPILE = true
        RUN_CHECKS = true
        S3_BUCKET_ARTIFACT = "cdt-devops-tools-lambda-functions-artifacts"
        S3_BUCKET_TEMPLATE = "cdt-devops-tools-lambda-functions-template"

    }
    options {
        //skipDefaultCheckout()
        // Only keep the 50 most recent builds
        buildDiscarder(logRotator(numToKeepStr: '50'))
        timeout(time: 20, unit: 'MINUTES')
        // disableConcurrentBuilds()
    }

    stages {

        stage('Check commit message') {
          steps {
            script {
              current_commit_message = sh(script: '''
                git rev-list --format=%B --max-count=1 HEAD |head -2 |tail -1
              ''', returnStdout: true).trim()

              if (current_commit_message == 'Prepare for next Release') {
                currentBuild.result = 'ABORTED'
                error('Parando build por ser um commit de CI.')
              }
            }
          }
        }

        stage('Check Branch Name') {
            steps {
                script {
                    if (BRANCH_NAME.startsWith("master") || BRANCH_NAME.startsWith("feature") || BRANCH_NAME.startsWith("develop") || BRANCH_NAME.startsWith("release") || BRANCH_NAME.startsWith("hotfix")) {
                        echo "***** Let's go to the Build *****"

                    } else {
                        currentBuild.result = 'ABORTED'
                        error('Parando o build por não estar de acordo com a nomenclatura de Branch.')
                    }
                }
            }
        }        

        stage('Notify') {
            steps {
                echo sh(returnStdout: true, script: 'env')
                notifyBuild('STARTED')
            }
        }

        stage('Pre-Build CheckList') {
            when {
                environment name: 'RUN_CHECKS', value: 'true'
            }
            steps {
                checkCommitBehind()
            }
        }

        stage('compile') {
            steps {
                script{
                    sh 'mvn package'
                }
            }
        }

        stage('Pre-Build') {
            when {
                environment name: 'RUN_PRE_BUILD', value: 'true'
            }
            steps {
                //echo sh("echo ${env.BRANCH_NAME}")
                script {

                    def pom = readMavenPom file: 'pom.xml'
                    env['pom'] = pom
                    env['pom_version'] = pom.version

                    env['RUN_BUILD_BRANCH'] = false
                    env['RUN_BUILD_MASTER'] = false
                    if (BRANCH_NAME.startsWith("master")) {
                        echo "***** PERFORMING STEPS ON MASTER *****"
                        env['pom_new_version'] = pom.version.replace("-SNAPSHOT", "")
                        env['environment'] = "prd"
                        env['RUN_BUILD_MASTER'] = true
                        updateVersion(true)
                        env['RUN_DEPLOY'] = true                        
                    }
                    else if (BRANCH_NAME.startsWith("develop")) {
                        echo "***** PERFORMING STEPS ON DEVELOP BRANCH *****"
                        bump_git_tag()
                        env['pom_new_version'] = pom.version.replace("-SNAPSHOT", "")                        
                        //env['pom_new_version'] = pom.version.replace("-SNAPSHOT", "-${bumpci_tag}")
                        env['environment'] = "hml"                                              
                        env['RUN_BUILD_BRANCH'] = true
                        updateVersion(false)
                        env['RUN_DEPLOY'] = true                        
                    }
                    else if (BRANCH_NAME.startsWith("feature")) {
                        echo "***** PERFORMING STEPS ON FEATURE BRANCH *****"
                        bump_git_tag()
                        env['pom_new_version'] = pom.version.replace("-SNAPSHOT", "-${bumpci_tag}")
                        env['environment'] = "hml"                                              
                        env['RUN_BUILD_BRANCH'] = true
                        updateVersion(false)
                        env['RUN_DEPLOY'] = false                           
                    }
                    else if (BRANCH_NAME.startsWith("release")) {
                        echo "***** PERFORMING STEPS ON RELEASE BRANCH *****"
                        bump_git_tag()
                        env['pom_new_version'] = pom.version.replace("-SNAPSHOT", "-${bumpci_tag}")
                        env['environment'] = "hml"                                              
                        env['RUN_BUILD_BRANCH'] = true
                        updateVersion(false)
                        env['RUN_DEPLOY'] = false                        
                    }
                    else if (BRANCH_NAME.startsWith("hotfix")) {
                        echo "***** PERFORMING STEPS ON HOTFIX BRANCH *****"
                        bump_git_tag()
                        env['pom_new_version'] = pom.version.replace("-SNAPSHOT", "-${bumpci_tag}")  
                        env['environment'] = "hml"
                        env['RUN_BUILD_BRANCH'] = true
                        updateVersion(false)
                        env['RUN_DEPLOY'] = false                        
                    }
                    else {
                        echo "***** BRANCHES MUST START WITH DEVELOP OR MASTER *****"
                        echo "***** STOPPED BUILD *****"
                        currentBuild.result = 'FAILURE'
                    }
                }

                script {
                    sh "mv ./target/yoda-movement-colletion-ted-${env.pom_new_version}-SNAPSHOT.jar ./target/yoda-movement-colletion-ted.jar"
                }                

                sh 'echo "***** FINISHED PRE-BUILD STEP *****"'
            }
        }

        stage('Build-Master') {
            when {
                environment name: 'RUN_BUILD_MASTER', value: 'true'
            }
            steps {
                sh 'echo "***** MASTER STEP (BUMP VERSION) *****"'
                //Ajusta a versão para release
                sh "mvn --batch-mode -B -V -U -e -DgenerateBackupPoms=false versions:set -Dmaven.test.skip=true -DnewVersion=${env.pom_new_version}"

                //FIXME javadoc:jar
                script {
                    sh 'git checkout master'
                    sh 'git commit -m "Version Bump" .'
                    //sh 'git checkout -- pom.xml'
                    def curr_version = env['pom_new_version']

                    def SNAPSHOT_PART = "-SNAPSHOT";
                    def versionParts = curr_version.tokenize('.');
                    def mayorVersionPart = versionParts[0];
                    def minorVersionPart = versionParts[1];
                    def fixVersionPart = versionParts[2];

                    int minorVersion = minorVersionPart.toInteger();
                    int fixVersion = fixVersionPart.toInteger();

                    def newFixVersion = fixVersion + 1
                    def developmentVersion = mayorVersionPart  + "." + minorVersion + "." + newFixVersion + SNAPSHOT_PART;
                    env['new_development_version'] = developmentVersion
                }

                //BUMP DA VERSAO
                sh "mvn versions:set --batch-mode -B -V -U -e -Dmaven.test.skip=true -DgenerateBackupPoms=false -DnewVersion=${env.new_development_version} -DupdateMatchingVersions=true"

                script {
                    sh "git commit -m 'Prepare for next Release' ."
                    sh "git push"
                }
            }

            post {
                success {
                    // Jenkins in build artifact registry
                    archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true
                    archiveArtifacts artifacts: 'target/*.war', allowEmptyArchive: true
                    archiveArtifacts artifacts: 'target/*.ear', allowEmptyArchive: true
                }
            }            
        }

        stage('package-sam') {
            steps {
              script{
                sh 'aws cloudformation package --template-file cloudformation/template/cloudformation.yml --s3-bucket ${S3_BUCKET_ARTIFACT}  --output-template-file cloudformation/output/cloudformation.yml'
                env['fileOutput'] = 'cloudformation.yml'
              }
            }
        }

        stage('upload cloudformation templates and parameter files') {
            steps {
                script{
                    echo "upload template to s3://${env.S3_BUCKET_TEMPLATE}/yoda-movement-colletion-ted/${newVersion}/templates/"
                    sh "aws s3 cp cloudformation/output/cloudformation.yml s3://${S3_BUCKET_TEMPLATE}/yoda-movement-colletion-ted/${newVersion}/templates/"
                    echo "upload parameter files to s3://${env.S3_BUCKET_TEMPLATE}/yoda-movement-colletion-ted/${newVersion}/parameters/"
                    sh "aws s3 sync cloudformation/parameters/ s3://${env.S3_BUCKET_TEMPLATE}/yoda-movement-colletion-ted/${newVersion}/parameters/"
                }
            }
        }

        stage('Deploy stack') {
          when {
            environment name: 'RUN_DEPLOY', value: 'true'
          }
          steps {
            script{
              echo "deploy stack movement colletion ted ${env.environment} to cloudformation"
                script {
                    if (BRANCH_NAME.startsWith("develop")) {
                        echo "Iniciando o deploy no ambiente de DEV"
                        sh(script: '''
                            curl -D - -X "POST" -H "Accept: application/json" -H "Content-Type: application/json" -H "X-Rundeck-Auth-Token: wRPCmvpA3F230lLvaxlXKTtKLkLsvvn9" -d '{"argString":"-template '${fileOutput}' -version '${newVersion}' -path yoda-movement-colletion-ted"}' https://rundeck.devtools.caradhras.io/api/19/job/06ba7d2a-6ee8-4c6b-ae9f-4c1b7714c850/executions
                        ''',)
                    }
                    //else if (BRANCH_NAME.startsWith("master")) {
                    //    echo "Iniciando o deploy no ambiente de HML"
                    //    sh(script: '''
                    //        curl -D - -X "POST" -H "Accept: application/json" -H "Content-Type: application/json" -H "X-Rundeck-Auth-Token: wRPCmvpA3F230lLvaxlXKTtKLkLsvvn9" -d '{"argString":"-template '${fileOutput}' -version '${newVersion}' -path yoda-movement-colletion-ted"}' https://rundeck.devtools.caradhras.io/api/19/job/c4b8fecd-fc6b-4657-9fe6-d12b1dcbc108/executions
                    //    ''',)
                    //}
                    //else {
                    //    echo "***** BRANCHES MUST START WITH DEVELOP OR MASTER *****"
                    //    echo "***** STOPPED BUILD *****"
                    //    currentBuild.result = 'FAILURE'
                    //}
                }
            }
          }
        }

//        stage('merge back') {
//            steps {
//              script{
//                if (BRANCH_NAME.startsWith("master")){
//                  merge_back()
//                }
//              }
//            }
//        }

    }
    post {
        success {
            notifyBuild('SUCCESSFUL')
            echo "success"
        }
        failure {
            notifyBuild('FAILED')
            echo "failure"
            // TO-DO delete cloud formation from S3
        }
        always {
            deleteDir() // Must delete after build, random errors occurs reusing workspace
        }
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
    // build status of null means successful
    buildStatus = buildStatus ?: 'SUCCESSFUL'

    // Default values
    String colorCode = '#FF0000'
    String subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    String summary = "${subject} \n (${env.BUILD_URL})  "
    String details = """<p>${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""


    JSONArray attachments = new JSONArray();
    JSONObject attachment = new JSONObject();

    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        colorCode = '#FFFF00'
        attachment.put('text','Começando o build. Será que vai dar certo?')
        attachment.put('thumb_url','http://icons.iconarchive.com/icons/jonathan-rey/simpsons/72/Homer-Simpson-03-Beer-icon.png')
    } else if (buildStatus == 'SUCCESSFUL') {
        colorCode = '#00FF00'
        attachment.put('text','Build com sucesso. Parabéns!')
        attachment.put('thumb_url','http://icons.iconarchive.com/icons/jonathan-rey/simpsons/72/Homer-Simpson-04-Happy-icon.png')

        JSONArray fields = new JSONArray();
        JSONObject field = new JSONObject();

        field.put('title', 'Template S3');
        field.put('value', env['fileOutput']);
        fields.add(field);

        field = new JSONObject();

        field.put('title', 'Version');
        field.put('value', env['newVersion']);
        fields.add(field);

        field.put('title', 'Path');
        field.put('value', 'yoda-movement-colletion-ted');
        fields.add(field);

        attachment.put('fields',fields);

	    //def list_type = ['DEV', 'UAT']
 
        //JSONArray actions = new JSONArray();

      	//JSONObject action = new JSONObject();
      	//action.put('name','datahub-deploy');
        //action.put('text','Ambientes');
        //action.put('type','select');
        //JSONArray options = new JSONArray();
        //for (i = 0; i < list_type.size(); i++) {
        //    JSONObject option = new JSONObject();
        //    String envCode = list_type[i];
        //    option.put('text', envCode);
        //    option.put('value', envCode);
        //    options.add(option);
        //}
      	//action.put('options',options);
      	//actions.add(action);

        //attachment.put('actions',actions);

    } else {
        attachment.put('text','Erroooouuu. Talvez você não mereça terminar o seu trabalho!')
        attachment.put('thumb_url','http://imagenes.montevideo.com.uy/imgnoticias/201509/_W420/525104.gif')
        colorCode = '#FF0000'
    }


    String buildUrl = "${env.BUILD_URL}";
    attachment.put('title', subject);
    attachment.put('callback_id', buildUrl);
    attachment.put('title_link', buildUrl);
    attachment.put('fallback', subject);
    attachment.put('color', colorCode);

    attachments.add(attachment);

    // Send notifications
    echo attachments.toString();
    slackSend(attachments: attachments.toString())

    //emailext(
    //        subject: subject,
    //        body: details,
    //        recipientProviders: [[$class: 'DevelopersRecipientProvider']]
    //)
}

def checkCommitBehind() {
    sh 'echo "Verifica se branch necessita de merge com master."'
    script {
        sh(script: '''set +x; set +e;
                      git fetch;
                      commitsBehind=$(git rev-list --left-right --count origin/master... |awk '{print $1}');
                      if [ ${commitsBehind} -ne 0 ]
                      then
                        echo "Esta branch está ${commitsBehind} commits atrás da master!"
                        exit 1
                      else
                        echo "Esta branch não tem commits atrás da master."
                      fi''')
    }

}

def bump_git_tag() {
    echo "Bumping Git CI Tag"

    script {
        sh "git fetch --tags"
        env['bumpci_tag'] = sh(script: '''
        current_tag=$(git tag -n9 -l |grep my_version |awk '{print $1}' |sort -V |tail -1)
        if [[ $current_tag == '' ]]
        then
          current_tag=0.0.1
        fi
        echo "${bumpci_tag}"          
      ''', returnStdout: true)
        //sh "git tag -a ${bumpci_tag} -m bumpci && git push origin refs/tags/${bumpci_tag}"
    }
}

def updateVersion(boolean isMaster){
    sh "git fetch --tags"
        env['my_version'] = sh(script: '''
            current_tag=`git tag -n9 -l |grep my_version |awk '{print $1}' |sort -V |tail -1`
            echo ${current_tag}
            ''', returnStdout: true).trim()

    if (env['my_version'] == ''){
        env['my_version'] = "1.0.3"
    }

    def oldVersion = "${env.my_version}".tokenize('.')

    if(isMaster){
        major = oldVersion[0].toInteger()
        minor = oldVersion[1].toInteger() + 1
        patch = 0
    }else{
        major = oldVersion[0].toInteger()
        minor = oldVersion[1].toInteger()
        patch = oldVersion[2].toInteger() + 1
    }
    env['newVersion'] = major + '.' + minor + '.' + patch

    bump_version_tag()
}

//def version_code_tag() {
//    echo "getting Git version Tag"
//    script {
//        sh "git fetch --tags"
//        env['bumpci_tag'] = sh(script: '''
//            current_tag=$(git tag -n9 -l |grep version |awk '{print $1}' |sort -V |tail -1)
//            if [[ $current_tag == '' ]]
//              then
//                current_tag=0.0.1
//            fi
//            ''', returnStdout: true).trim()
//    }
//}

def bump_version_tag() {
  echo "Bumping version CI Tag"
  script {
      sh "git tag -a ${newVersion} -m my_version && git push origin refs/tags/${newVersion}"
  }
}

//def get_envs(){
//  script{
//    def URL_COMMIT = "https://api.github.com/repos/${env.REPO_NAME_STACK}-infra/commits"
//    def response_commit = httpRequest authentication: 'github-user', httpMode: 'GET', url: "${URL_COMMIT}"
//    def response_payload = readJSON text: response_commit.content
//
//    def sha_tree = ""
//    for (commits in response_payload){
//        sha_tree = commits['commit']['tree']['sha']
//        break;
//    }
//
//    def URL_TREE = "https://api.github.com/repos/${env.REPO_NAME_STACK}-infra/git/trees/${sha_tree}?recursive=1'"
//    def response_tree = httpRequest authentication: 'github-user', httpMode: 'GET', url: "${URL_TREE}"
//    def response_tree_payload = readJSON text: response_tree.content
//
//    def envs = []
//    for(tree in response_tree_payload['tree']){
//        def regex = ".*/(.*)\\.json"
//        path_match = tree['path'] ==~ regex
//        if(path_match){
//            def matcher = tree['path'] =~ regex
//            def env_infra = matcher[0][1]
//            envIsprd = env_infra ==~ 'prd|blue|green'
//            if(!envIsprd){
//              envs.add(matcher[0][1])
//            }
//        }
//    }
//    return envs
//  }
//}

//def merge_back() {
//  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'rundeck-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
//    script {
//      sh 'curl -s -c rundeck.cookie "http://devops-rundeck.cdt.local.br/j_security_check?j_username=${USERNAME}&j_password=${PASSWORD}"'
//      env['job_id'] = sh(script: '''
//        curl -s -b rundeck.cookie "http://devops-rundeck.cdt.local.br/api/19/project/git/jobs?jobExactFilter=mergeback" |grep '<job ' |sed -r 's,.*id="([^"]*).*,\\1,' |tr -d '\n'
//      ''', returnStdout: true)
//      env['repo'] = sh(script: '''
//        git remote show -n origin | grep Fetch | sed -r 's,.*:(.*).git,\\1,' |tr -d '\n'
//      ''', returnStdout: true)
//      sh 'curl -s -X POST -b rundeck.cookie "http://devops-rundeck.cdt.local.br/api/19/job/${job_id}/run?option.repo=${repo}"'
//    }
//  }
//}